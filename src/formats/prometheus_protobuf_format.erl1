-module(prometheus_protobuf_format).
-export([content_type/0,
         format/0,
         format/1,
         registry_collect_callback/3,
         collector_metrics_callback/5]).

-include("prometheus.hrl").
-include("prometheus_proto.hrl").

-behaviour(prometheus_format).

%%====================================================================
%% Format API
%%====================================================================

content_type() ->
  <<"application/vnd.google.protobuf; proto=io.prometheus.client.MetricFamily; encoding=delimited">>.

format() ->
  format(default).

format(Registry) ->
  {ok, Fd} = ram_file:open("", [write,read,binary]),
  prometheus_registry:collect(Registry, fun (_, Collector) ->
                                            registry_collect_callback(Fd, Registry, Collector)
                                        end),
  {ok, Size} = ram_file:get_size(Fd),
  {ok, Buf} = file:pread(Fd, 0, Size),
  ok = file:close(Fd),
  Buf.

registry_collect_callback(Fd, Registry, Collector) ->
  Collector:collect_mf(
    fun (Type, MFName, Labels, Help, MFData) ->
        MF = #'MetricFamily'{name = MFName,
                        help = Help,
                        type = metric_type_to_proto_type(Type)},
        Collector:collect_metrics(MFName,
                                  fun (Series, Value) ->
                                      case Series of
                                        {Name, LabelValues} ->
                                          collector_metrics_callback(Fd, Name, Labels, LabelValues, Value);
                                        {Name, NewLabels, LabelValues} ->
                                          collector_metrics_callback(Fd, Name, Labels ++ NewLabels, LabelValues, Value);
                                        LabelValues ->
                                          collector_metrics_callback(Fd, MFName, Labels, LabelValues, Value)
                                      end
                                  end,
                                  MFData)
    end,
    Registry).

create_metric_record(Fd, MFName, Name,

collector_metrics_callback(Fd, Name, Labels, LabelValues, '') ->
  LString = labels_string(Labels, LabelValues),
  file:write(Fd, io_lib:format("~s" ++ LString ++ " NaN\n", [Name]));
collector_metrics_callback(Fd, Name, Labels, LabelValues, undefined) ->
  LString = labels_string(Labels, LabelValues),
  file:write(Fd, io_lib:format("~s" ++ LString ++ " NaN\n", [Name]));
collector_metrics_callback(Fd, Name, Labels, LabelValues, Value) ->
  LString = labels_string(Labels, LabelValues),
  file:write(Fd, io_lib:format("~s" ++ LString ++ " ~p\n", [Name, Value])).


%%====================================================================
%% Private Parts
%%====================================================================

metric_type_to_proto_type(counter) ->
  'COUNTER';
metric_type_to_proto_type(gauge) ->
  'GAUGE';
metric_type_to_proto_type(summary) ->
  'SUMMARY';
metric_type_to_proto_type(untyped) ->
  'UNTYPED';
metric_type_to_proto_type(histogram) ->
  'HISTOGRAM';
metric_type_to_proto_type(_) ->
  udnefined.






delimited_encode_mf(MF) ->
  IoRec = prometheus_proto:encode_msg(MF),
  Size = iolist_size(IoRec),
  [e_varint(Size, <<>>), IoRec].

e_varint(N, Bin) when N =< 127 -> <<Bin/binary, N>>;
e_varint(N, Bin) ->
  Bin2 = <<Bin/binary, (N band 127 bor 128)>>,
  e_varint(N bsr 7, Bin2).
